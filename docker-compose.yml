#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

volumes:
  postgres_metadata_data: {}
  middle_var: {}
  historical_var: {}
  broker_var: {}
  coordinator_var: {}
  router_var: {}
  druid_shared: {}

services:
  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    restart: "on-failure"
  # pull kafka for streaming data
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    restart: "on-failure"
  postgres:
    container_name: postgres
    image: postgres:14-alpine
    restart: always
    ports:
      - "15432:5432"
    environment:
      - POSTGRES_USER=druid
      - POSTGRES_PASSWORD=FoolishPassword
    volumes:
      - ./init:/docker-entrypoint-initdb.d/
      - postgres_metadata_data:/var/lib/postgresql/data

  # setup airflow with standalone mode, user is admin and password in /airflow/standalone_admin_password.txt
  airflow:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/:/opt/airflow/
    environment:
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://druid:FoolishPassword@postgres:5432/airflow
    command: airflow standalone
    depends_on:
      - kafka      

  minio:
    container_name: minio
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio_db:/data
    environment:
      MINIO_ROOT_USER: adminadmin
      MINIO_ROOT_PASSWORD: adminadmin
    command: server --console-address ":9001" /data

  coordinator:
    image: apache/druid:30.0.0
    container_name: coordinator
    volumes:
      - druid_shared:/opt/shared
      - coordinator_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - minio
    ports:
      - "8081:8081"
    command:
      - coordinator
    env_file:
      - ./druid/environment

  broker:
    image: apache/druid:30.0.0
    container_name: broker
    volumes:
      - broker_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8082:8082"
    command:
      - broker
    env_file:
      - ./druid/environment

  historical:
    image: apache/druid:30.0.0
    container_name: historical
    volumes:
      - druid_shared:/opt/shared
      - historical_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - postgres
      - coordinator
      - minio
    ports:
      - "8083:8083"
    command:
      - historical
    env_file:
      - ./druid/environment
    restart: unless-stopped

  middlemanager:
    image: apache/druid:30.0.0
    container_name: middlemanager
    volumes:
      - druid_shared:/opt/shared
      - middle_var:/opt/druid/var
    depends_on: 
      - zookeeper
      - postgres
      - coordinator
      - minio
    ports:
      - "8091:8091"
      - "8100-8105:8100-8105"
    command:
      - middleManager
    env_file:
      - ./druid/environment

  router:
    image: apache/druid:30.0.0
    container_name: router
    volumes:
      - router_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
      - minio
    ports:
      - "8888:8888"
    command:
      - router
    env_file:
      - ./druid/environment
  superset:
      build:
        context: ./superset
        dockerfile: dockerfile
      container_name: superset
      depends_on:
        - postgres
      environment:
        - ADMIN_USERNAME=admin
        - ADMIN_EMAIL=admin@superset.com
        - ADMIN_PASSWORD=admin
      ports:
        - '8088:8088'
